package require tcltest
source thtcl-level-2.tcl

::tcltest::test thtcl2-1.0 {calculate circle area} {
    pep "(define circle-area (lambda (r) (* pi (* r r))))"
    pep "(circle-area 3)"
} 28.274333882308138

::tcltest::test thtcl2-2.0 {calculate factorial} {
    pep "(define fact (lambda (n) (if (<= n 1) 1 (* n (fact (- n 1))))))"
    pep "(fact 10)"
} 3628800

::tcltest::test thtcl2-2.1 {calculate factorial} {
    pep "(fact 100)"
} 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000

::tcltest::test thtcl2-2.2 {calculate factorial} {
    pep "(circle-area (fact 10))"
} 41369087205782.695

::tcltest::test thtcl2-3.0 {count} -body {
    pep "(define first car)"
    pep "(define rest cdr)"
    pep "(define truthtoint (lambda (val) (if val 1 0)))"
    pep "(define count (lambda (item L) (if (not (eqv? L '())) (+ (truthtoint (equal? item (first L))) (count item (rest L))) 0)))"
} -result ""

::tcltest::test thtcl2-3.0 {count} -body {
    pep "(count 0 (list 0 1 2 3 0 0))"
} -result 3

::tcltest::test thtcl2-3.1 {count} -body {
    pep "(count (quote the) (quote (the more the merrier the bigger the better)))"
} -result 4

::tcltest::test thtcl2-4.0 {twice} {
    pep "(define twice (lambda (x) (* 2 x)))"
    pep "(twice 5)"
} 10

::tcltest::test thtcl2-4.1 {twice} {
    pep "(define repeat (lambda (f) (lambda (x) (f (f x)))))"
    pep "((repeat twice) 10)"
} 40

::tcltest::test thtcl2-4.2 {twice} {
    pep "((repeat (repeat twice)) 10)"
} 160

::tcltest::test thtcl2-4.3 {twice} {
    pep "((repeat (repeat (repeat twice))) 10)"
} 2560

::tcltest::test thtcl2-4.4 {twice} {
    pep "((repeat (repeat (repeat (repeat twice)))) 10)"
} 655360

::tcltest::test thtcl2-5.0 {fib-range} {
    pep "(define fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2))))))"
    pep "(define range (lambda (a b) (if (= a b) (quote ()) (cons a (range (+ a 1) b)))))"
    pep "(range 0 10)"
} "(0 1 2 3 4 5 6 7 8 9)"

::tcltest::test thtcl2-5.1 {fib-range} {
    pep "(map fib (range 0 10))"
} "(1 1 2 3 5 8 13 21 34 55)"

::tcltest::test thtcl2-5.2 {fib-range} {
    pep "(map fib (range 0 20))"
} "(1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765)"

::tcltest::test thtcl2-6.0 {procedure call with a list operator} {
    pep "((if #t + *) 2 3)"
} "5"

::tcltest::test thtcl2-7.0 {assignment} {
    pep "(begin (define r 10) (set! r 20) r)"
} "20"

::tcltest::test thtcl2-7.1 {assignment returns a value} {
    pep "(begin (define r 10) (set! r 20))"
} "20"

::tcltest::test thtcl2-7.2 {assignment to an unbound symbol} -body {
    pep "(begin (set! XX 20))"
} -returnCodes error -result "Unbound variable: XX"

::tcltest::test thtcl2-8.0 {procedure definition} -body {
    pep "(lambda (r) (* r r))"
} -match regexp -result "::oo::Obj\\d+"

::tcltest::test thtcl2-8.1 {procedure with two expressions} -body {
    pep "(define f (lambda () (define r 20) (* r r)))"
    pep "(f)"
} -match regexp -result "400"

::tcltest::test thtcl2-9.0 {symbol?} {
    pep "(symbol? (quote foo99))"
} "#t"

::tcltest::test thtcl2-10.0 {shadowing} {
    pep "(begin (define r 10) (define f (lambda (r) (set! r 20))) (f 30) r)"
} "10"

#-constraints knownBug 
::tcltest::test thtcl2-11.0 {and} -body {
    pep "(and (= 2 2) (> 2 1))"
} -result "#t"

::tcltest::test thtcl2-11.1 {and} {
    pep "(and (= 2 2) (< 2 1))"
} "#f"

::tcltest::test thtcl2-11.2 {and :( } -body {
    pep "(and)"
} -result "#t"

::tcltest::test thtcl2-11.3 {and} {
    pep "(and 1 2 (quote c) (quote (f g)))"
} "(f g)"

::tcltest::test thtcl2-12.0 {or} {
    pep "(or (= 2 2) (> 2 1))"
} "#t"

::tcltest::test thtcl2-12.1 {or} {
    pep "(or (= 2 2) (< 2 1))"
} "#t"

::tcltest::test thtcl2-12.2 {or} {
    pep "(or #f #f #f)"
} "#f"

::tcltest::test thtcl2-12.3 {or} {
    pep "(or)"
} "#f"

::tcltest::test thtcl2-13.0 {expandquotes} {
    pep "''foo"
} "(quote foo)"


::tcltest::test global_env-1.0 {check for a symbol} {
    lookup pi ::global_env
} 3.1415926535897931

::tcltest::test global_env-2.0 {dereference an unbound symbol} -body {
    pep "foo"
} -returnCodes error -result "Unbound variable: foo"

::tcltest::test global_env-2.1 {dereference an unbound symbol: procedure} -body {
    pep "(foo)"
} -returnCodes error -result "Unbound variable: foo"

::tcltest::test macro-1.0 {let macro} {
    set exp [parse "(let ((a 4) (b 5)) (+ a 2))"]
    set args [lassign $exp op]
    # kludge to get around Tcl's list literal handling
    if {"\{$op\}" eq $exp} {set args [lassign [lindex $exp 0] op]}
    expand-macro op args ::global_env
    printable [list $op {*}$args]
} "((lambda (a b) (+ a 2)) 4 5)"

::tcltest::test macro-1.1 {let macro} {
    pep "(let ((a 4) (b 5)) (+ a 2))"
} "6"

::tcltest::test macro-1.2 {let macro} {
    set exp [parse "(let ((a 4) (b 5)) (+ a 2) (- 10 b))"]
    set args [lassign $exp op]
    # kludge to get around Tcl's list literal handling
    if {"\{$op\}" eq $exp} {set args [lassign [lindex $exp 0] op]}
    expand-macro op args ::global_env
    printable [list $op {*}$args]
} "((lambda (a b) (+ a 2) (- 10 b)) 4 5)"

::tcltest::test macro-1.3 {let macro} {
    pep "(let ((a 4) (b 5)) (+ a 2) (- 10 b))"
} "5"

::tcltest::test macro-1.4 {let macro with repeated var} -body {
    set exp [parse "(let ((a 4) (b 5) (a 8)) (+ a 2) (- 10 b))"]
    set args [lassign $exp op]
    # kludge to get around Tcl's list literal handling
    if {"\{$op\}" eq $exp} {set args [lassign [lindex $exp 0] op]}
    expand-macro op args ::global_env
    printable [list $op {*}$args]
} -returnCodes error -result "variable 'a' occurs more than once in let construct"

::tcltest::test macro-2.0 {cond macro} {
    set exp [parse "(cond ((> 3 4) (+ 4 2)) ((> 1 2) (+ 5 5)) (#t (- 8 5)))"]
    set args [lassign $exp op]
    # kludge to get around Tcl's list literal handling
    if {"\{$op\}" eq $exp} {set args [lassign [lindex $exp 0] op]}
    expand-macro op args ::global_env
    printable [list $op {*}$args]
} "(if (> 3 4) (begin (+ 4 2)) (if (> 1 2) (begin (+ 5 5)) (if #t (begin (- 8 5)) (quote ()))))"

::tcltest::test macro-2.1 {cond macro} {
    pep "(cond ((> 3 4) (+ 4 2)) ((> 1 2) (+ 5 5)) (#t (- 8 5)))"
} "3"

::tcltest::test macro-2.2 {cond macro} {
    set exp [parse "(cond ((> 3 4) (+ 4 2)) ((> 1 2) (+ 5 5)))"]
    set args [lassign $exp op]
    # kludge to get around Tcl's list literal handling
    if {"\{$op\}" eq $exp} {set args [lassign [lindex $exp 0] op]}
    expand-macro op args ::global_env
    printable [list $op {*}$args]
} "(if (> 3 4) (begin (+ 4 2)) (if (> 1 2) (begin (+ 5 5)) (quote ())))"

::tcltest::test macro-2.3 {cond macro} {
    pep "(cond ((> 3 4) (+ 4 2)) ((> 1 2) (+ 5 5)))"
} ""

::tcltest::test macro-2.4 {cond macro} {
    set exp [parse "(cond ((> 3 4) (+ 4 2) (+ 3 5)) ((> 1 2) (+ 5 5)))"]
    set args [lassign $exp op]
    # kludge to get around Tcl's list literal handling
    if {"\{$op\}" eq $exp} {set args [lassign [lindex $exp 0] op]}
    expand-macro op args ::global_env
    printable [list $op {*}$args]
} "(if (> 3 4) (begin (+ 4 2) (+ 3 5)) (if (> 1 2) (begin (+ 5 5)) (quote ())))"


::tcltest::test macro-3.0 {case macro} {
    set exp [parse "(case (* 2 3) ((2 3 5 7) (quote prime)) ((1 4 6 8 9) (quote composite)))"]
    set args [lassign $exp op]
    # kludge to get around Tcl's list literal handling
    if {"\{$op\}" eq $exp} {set args [lassign [lindex $exp 0] op]}
    expand-macro op args ::global_env
    printable [list $op {*}$args]
} "(if (or (eqv? (quote 6) (quote 2)) (eqv? (quote 6) (quote 3)) (eqv? (quote 6) (quote 5)) (eqv? (quote 6) (quote 7))) (begin (quote prime)) (if (or (eqv? (quote 6) (quote 1)) (eqv? (quote 6) (quote 4)) (eqv? (quote 6) (quote 6)) (eqv? (quote 6) (quote 8)) (eqv? (quote 6) (quote 9))) (begin (quote composite)) (quote ())))"

::tcltest::test macro-3.1 {case macro} {
    pep "(case (* 2 3) ((2 3 5 7) (quote prime)) ((1 4 6 8 9) (quote composite)))"
} "composite"

::tcltest::test macro-3.2 {case macro} {
    set exp [parse "(case (car (quote (c d))) ((a e i o u) (quote vowel)) ((w y) (quote semivowel)) (else (quote consonant)))"]
    set args [lassign $exp op]
    # kludge to get around Tcl's list literal handling
    if {"\{$op\}" eq $exp} {set args [lassign [lindex $exp 0] op]}
    expand-macro op args ::global_env
    printable [list $op {*}$args]
} "(if (or (eqv? (quote c) (quote a)) (eqv? (quote c) (quote e)) (eqv? (quote c) (quote i)) (eqv? (quote c) (quote o)) (eqv? (quote c) (quote u))) (begin (quote vowel)) (if (or (eqv? (quote c) (quote w)) (eqv? (quote c) (quote y))) (begin (quote semivowel)) (if #t (begin (quote consonant)) (quote ()))))"

::tcltest::test macro-3.3 {case macro} {
    pep "(case (car (quote (c d))) ((a e i o u) (quote vowel)) ((w y) (quote semivowel)) (else (quote consonant)))"
} "consonant"


::tcltest::test macro-4.0 {for macro} -body {
    set exp [parse "(for ((i (quote (1 2 3)))) (display i))"]
    set args [lassign $exp op]
    # kludge to get around Tcl's list literal handling
    if {"\{$op\}" eq $exp} {set args [lassign [lindex $exp 0] op]}
    expand-macro op args ::global_env
    printable [list $op {*}$args]
} -result "(begin (begin (define i 1) (display i)) (begin (define i 2) (display i)) (begin (define i 3) (display i)) (quote ()))"

::tcltest::test macro-4.1 {for macro} -body {
    pep "(for ((i (quote (1 2 3)))) (display i))"
} -result "" -output 123

::tcltest::test macro-4.2 {for macro} -body {
    set exp [parse "(for ((i 4)) (display i))"]
    set args [lassign $exp op]
    # kludge to get around Tcl's list literal handling
    if {"\{$op\}" eq $exp} {set args [lassign [lindex $exp 0] op]}
    expand-macro op args ::global_env
    printable [list $op {*}$args]
} -result "(begin (begin (define i 0) (display i)) (begin (define i 1) (display i)) (begin (define i 2) (display i)) (begin (define i 3) (display i)) (quote ()))"

::tcltest::test macro-4.3 {for macro} -body {
    pep "(for ((i 4)) (display i))"
} -result "" -output 0123



::tcltest::test macro-5.0 {for/list macro} -body {
    set exp [parse {(for/list ([i (quote (1 2 3))]) (* i i))}]
    set args [lassign $exp op]
    # kludge to get around Tcl's list literal handling
    if {"\{$op\}" eq $exp} {set args [lassign [lindex $exp 0] op]}
    expand-macro op args ::global_env
    printable [list $op {*}$args]
} -result "(begin (define res ()) (begin (define i 1) (set! res (append res (begin (* i i))))) (begin (define i 2) (set! res (append res (begin (* i i))))) (begin (define i 3) (set! res (append res (begin (* i i))))) res)"

::tcltest::test macro-5.1 {for/list macro} -body {
    pep {(for/list ([i (quote (1 2 3))]) (* i i))}
} -result "(1 4 9)"

::tcltest::test macro-5.2 {for/list macro} -body {
    set exp [parse {(for/list ([i (in-range 1 4)]) (* i i))}]
    set args [lassign $exp op]
    # kludge to get around Tcl's list literal handling
    if {"\{$op\}" eq $exp} {set args [lassign [lindex $exp 0] op]}
    expand-macro op args ::global_env
    printable [list $op {*}$args]
} -result "(begin (define res ()) (begin (define i 1) (set! res (append res (begin (* i i))))) (begin (define i 2) (set! res (append res (begin (* i i))))) (begin (define i 3) (set! res (append res (begin (* i i))))) res)"

::tcltest::test macro-5.2 {for/list macro} -body {
    pep {(for/list ([i (in-range 1 4)]) (* i i))}
} -result "(1 4 9)"

::tcltest::test macro-6.0 {for/and macro} -body {
    set exp [parse {(for/and ([chapter '(1 2 3)]) (equal? chapter 1))}]
    set args [lassign $exp op]
    # kludge to get around Tcl's list literal handling
    if {"\{$op\}" eq $exp} {set args [lassign [lindex $exp 0] op]}
    expand-macro op args ::global_env
    printable [list $op {*}$args]
} -result "(and (begin (define chapter 1) (begin (equal? chapter 1))) (begin (define chapter 2) (begin (equal? chapter 1))) (begin (define chapter 3) (begin (equal? chapter 1))))"

::tcltest::test macro-6.1 {for/and macro} -body {
    pep {(for/and ([chapter '(1 2 3)]) (equal? chapter 1))}
} -result "#f"

::tcltest::test macro-6.2 {for/or macro} -body {
    set exp [parse {(for/or ([chapter '(1 2 3)]) (equal? chapter 1))}]
    set args [lassign $exp op]
    # kludge to get around Tcl's list literal handling
    if {"\{$op\}" eq $exp} {set args [lassign [lindex $exp 0] op]}
    expand-macro op args ::global_env
    printable [list $op {*}$args]
} -result "(or (begin (define chapter 1) (begin (equal? chapter 1))) (begin (define chapter 2) (begin (equal? chapter 1))) (begin (define chapter 3) (begin (equal? chapter 1))))"

::tcltest::test macro-6.3 {for/or macro} -body {
    pep {(for/or ([chapter '(1 2 3)]) (equal? chapter 1))}
} -result "#t"



::tcltest::cleanupTests
