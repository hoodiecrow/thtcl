package require tcltest
source thtcl-level-1.tcl

::tcltest::test thtcl1-1.0 {calculate circle area} {
    pep "(begin (define r 10) (* pi (* r r)))"
} 314.1592653589793

::tcltest::test thtcl1-1.1 {boolean literals} {
    pep "#t"
} "#t"

::tcltest::test thtcl1-1.2 {boolean literals} {
    pep "#f"
} "#f"


::tcltest::test thtcl1-2.0 {conditional} {
    pep "(if (> (* 11 11) 120) (* 7 6) oops)"
} 42

::tcltest::test thtcl1-2.1 {conditional} -body {
    pep "(if)"
} -result {}

::tcltest::test thtcl1-2.2 {conditional} -body {
    pep "(if 1 2 3 4 5)"
} -result 2


::tcltest::test thtcl1-3.0 {procedure call with a list operator} {
    pep "((if #t + *) 2 3)"
} "5"

::tcltest::test thtcl1-4.0 {dereference an unbound symbol} -body {
    pep "foo"
} -returnCodes error -result "key \"foo\" not known in dictionary"

::tcltest::test standard_env-1.0 {append} {
    pep "(append (list 1 2) (list 3 4))"
} "(1 2 3 4)"

::tcltest::test standard_env-2.0 {apply} {
    pep "(begin (define e (list 1 2 3)) (apply car e))"
} "1"

::tcltest::test standard_env-3.0 {car} {
    pep "(car (list 1 2 3))"
} "1"

::tcltest::test standard_env-4.0 {cdr} {
    pep "(cdr (list 1 2 3))"
} "(2 3)"

::tcltest::test standard_env-5.0 {cons} {
    pep "(cons 1 (list 2 3))"
} "(1 2 3)"

::tcltest::test standard_env-6.0 {eq?} {
    pep "(eq? 1 1)"
} "#t"

::tcltest::test standard_env-6.1 {eq?} {
    pep "(eq? 1 1.0)"
} "#f"

::tcltest::test standard_env-7.0 {equal?} {
    pep "(equal? 1 1)"
} "#t"

::tcltest::test standard_env-7.1 {equal?} {
    pep "(equal? 1 1.0)"
} "#f"

::tcltest::test standard_env-7.2 {equal? : =} {
    pep "(= 1 1)"
} "#t"

::tcltest::test standard_env-7.3 {equal? : =} {
    pep "(= 1 1.0)"
} "#t"

::tcltest::test standard_env-8.0 {length} {
    pep "(length (list 1 2 3))"
} "3"

::tcltest::test standard_env-9.0 {list} {
    pep "(list 1 2 3)"
} "(1 2 3)"

::tcltest::test standard_env-10.0 {map} {
    # verified in Scheme
    pep "(begin (define lst (list (list 1 2) (list 3 4))) (map car lst))"
} "(1 3)"

::tcltest::test standard_env-11.0 {not} {
    pep "(not #t)"
} "#f"

::tcltest::test standard_env-11.1 {not} {
    pep "(not #f)"
} "#t"

::tcltest::test standard_env-11.2 {not} {
    pep "(not 99)"
} "#f"

::tcltest::test standard_env-12.0 {null?} {
    pep "(null? ())"
} "#t"

::tcltest::test standard_env-12.1 {null?} {
    pep "(null? 99)"
} "#f"

::tcltest::test standard_env-13.0 {number?} {
    pep "(number? (list 1 2))"
} "#f"

::tcltest::test standard_env-13.1 {number?} {
    pep "(number? 99)"
} "#t"

::tcltest::test standard_env-14.0 {symbol?} {
    pep "(symbol? (list 1 2))"
} "#f"

::tcltest::test standard_env-14.1 {symbol?} {
    pep "(symbol? 99)"
} "#f"

::tcltest::test standard_env-15.0 {math} {
    pep "(list (+ 1 1) (+ 2 2) (* 2 3) (expt 2 3))"
} "(2 4 6 8.0)"

::tcltest::test standard_env-16.0 {math: degrees and radians} {
    pep "(deg->rad 90)"
} "1.5707963267948966"

::tcltest::test standard_env-16.1 {math: degrees and radians} {
    pep "(rad->deg (/ pi 2))"
} "90.0"

::tcltest::test standard_env-17.0 {math: zero, positive, negative, even, odd predicates} {
    pep "(zero? 2)"
} "#f"

::tcltest::test standard_env-17.1 {math: zero, positive, negative, even, odd predicates} {
    pep "(zero? 0)"
} "#t"

::tcltest::test standard_env-17.2 {math: zero, positive, negative, even, odd predicates} {
    pep "(positive? 0)"
} "#f"

::tcltest::test standard_env-17.3 {math: zero, positive, negative, even, odd predicates} {
    pep "(positive? 1)"
} "#t"

::tcltest::test standard_env-17.4 {math: zero, positive, negative, even, odd predicates} {
    pep "(negative? 0)"
} "#f"

::tcltest::test standard_env-17.5 {math: zero, positive, negative, even, odd predicates} {
    pep "(negative? -1)"
} "#t"

::tcltest::test standard_env-17.6 {math: zero, positive, negative, even, odd predicates} {
    pep "(even? 0)"
} "#t"

::tcltest::test standard_env-17.7 {math: zero, positive, negative, even, odd predicates} {
    pep "(even? 1)"
} "#f"

::tcltest::test standard_env-17.8 {math: zero, positive, negative, even, odd predicates} {
    pep "(odd? 0)"
} "#f"

::tcltest::test standard_env-17.9 {math: zero, positive, negative, even, odd predicates} {
    pep "(odd? 1)"
} "#t"

::tcltest::test standard_env-17.10 {math: zero, positive, negative, even, odd predicates} -body {
    pep "(odd? (list 1 2))"
} -returnCodes error -result "NUMBER expected (odd? (1 2))"

::tcltest::test standard_env-17.11 {math: zero, positive, negative, even, odd predicates} -body {
    pep "(zero? (positive? 1))"
} -returnCodes error -result "NUMBER expected (zero? #t)"


::tcltest::test standard_env-18.0 {list reverse} {
    pep "(reverse (list 1 2 3))"
} "(3 2 1)"

::tcltest::test standard_env-19.0 {list index} {
    pep "(list-ref (list 1 2 3) 1)"
} "2"

::tcltest::test repl-1.0 {expandquotes} {
    parse "'foo"
} "{quote foo}"

::tcltest::test repl-1.1 {expandquotes} {
    parse "'(foo bar)"
} "{quote {foo bar}}"

::tcltest::test repl-1.2 {expandquotes} {
    parse "foo 'bar"
} "foo {quote bar}"

::tcltest::test repl-1.3 {expandquotes} {
    parse "'foo ''bar"
} "{quote foo} {quote {quote bar}}"

::tcltest::test repl-1.4 {expandquotes} {
    parse "''(foo bar)"
} "{quote {quote {foo bar}}}"

::tcltest::test repl-1.5 {expandquotes} -body {
    parse "'(foo (bar"
} -returnCodes error -result "missing 2 right parentheses/brackets"



::tcltest::cleanupTests
