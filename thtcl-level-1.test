package require tcltest 2.5
source thtcl-level-1.tcl

package require tcltest 2.5
eval ::tcltest::configure $argv
source thtcl-level-1.tcl

::tcltest::test thtcl1-1.0 {calculate circle area} {
    scheme_str [evaluate [parse "(begin (define r 10) (* pi (* r r)))"]]
} 314.1592653589793

::tcltest::test thtcl1-2.0 {conditional} {
    scheme_str [evaluate [parse "(if (> (* 11 11) 120) (* 7 6) oops)"]]
} 42

::tcltest::test thtcl1-2.1 {conditional} -body {
    scheme_str [evaluate [parse "(if)"]]
} -result {}

::tcltest::test thtcl1-2.2 {conditional} -body {
    scheme_str [evaluate [parse "(if 1 2 3 4 5)"]]
} -result 2


::tcltest::test thtcl1-3.0 {procedure call with a list operator} {
    scheme_str [evaluate [parse "((if #t + *) 2 3)"]]
} "5"

::tcltest::test thtcl1-4.0 {dereference an unbound symbol} -body {
    scheme_str [evaluate [parse "foo"]]
} -returnCodes error -result "key \"foo\" not known in dictionary"

::tcltest::test standard_env-1.0 {append} {
    scheme_str [evaluate [parse "(append (list 1 2) (list 3 4))"]]
} "(1 2 3 4)"

::tcltest::test standard_env-2.0 {apply} {
    scheme_str [evaluate [parse "(begin (define e (list 1 2 3)) (apply car e))"]]
} "1"

::tcltest::test standard_env-3.0 {car} {
    scheme_str [evaluate [parse "(car (list 1 2 3))"]]
} "1"

::tcltest::test standard_env-4.0 {cdr} {
    scheme_str [evaluate [parse "(cdr (list 1 2 3))"]]
} "(2 3)"

::tcltest::test standard_env-5.0 {cons} {
    scheme_str [evaluate [parse "(cons 1 (list 2 3))"]]
} "(1 2 3)"

::tcltest::test standard_env-6.0 {eq?} {
    scheme_str [evaluate [parse "(eq? 1 1)"]]
} "#t"

::tcltest::test standard_env-6.1 {eq?} {
    scheme_str [evaluate [parse "(eq? 1 1.0)"]]
} "#f"

::tcltest::test standard_env-7.0 {equal?} {
    scheme_str [evaluate [parse "(equal? 1 1)"]]
} "#t"

::tcltest::test standard_env-7.1 {equal?} {
    scheme_str [evaluate [parse "(equal? 1 1.0)"]]
} "#f"

::tcltest::test standard_env-7.2 {equal? : =} {
    scheme_str [evaluate [parse "(= 1 1)"]]
} "#t"

::tcltest::test standard_env-7.3 {equal? : =} {
    scheme_str [evaluate [parse "(= 1 1.0)"]]
} "#t"

::tcltest::test standard_env-8.0 {length} {
    scheme_str [evaluate [parse "(length (list 1 2 3))"]]
} "3"

::tcltest::test standard_env-9.0 {list} {
    scheme_str [evaluate [parse "(list 1 2 3)"]]
} "(1 2 3)"

::tcltest::test standard_env-10.0 {map} {
    # verified in Scheme
    scheme_str [evaluate [parse "(begin (define lst (list (list 1 2) (list 3 4))) (map car lst))"]]
} "(1 3)"

::tcltest::test standard_env-11.0 {not} {
    scheme_str [evaluate [parse "(not #t)"]]
} "#f"

::tcltest::test standard_env-11.1 {not} {
    scheme_str [evaluate [parse "(not #f)"]]
} "#t"

::tcltest::test standard_env-11.2 {not} {
    scheme_str [evaluate [parse "(not 99)"]]
} "#f"

::tcltest::test standard_env-12.0 {null?} {
    scheme_str [evaluate [parse "(null? ())"]]
} "#t"

::tcltest::test standard_env-12.1 {null?} {
    scheme_str [evaluate [parse "(null? 99)"]]
} "#f"

::tcltest::test standard_env-13.0 {number?} {
    scheme_str [evaluate [parse "(number? (list 1 2))"]]
} "#f"

::tcltest::test standard_env-13.1 {number?} {
    scheme_str [evaluate [parse "(number? 99)"]]
} "#t"

::tcltest::test standard_env-14.0 {symbol?} {
    scheme_str [evaluate [parse "(symbol? (list 1 2))"]]
} "#f"

::tcltest::test standard_env-14.1 {symbol?} {
    scheme_str [evaluate [parse "(symbol? 99)"]]
} "#f"

::tcltest::test standard_env-15.0 {math} {
    scheme_str [evaluate [parse "(list (+ 1 1) (+ 2 2) (* 2 3) (expt 2 3))"]]
} "(2 4 6 8.0)"

::tcltest::test standard_env-16.0 {math: degrees and radians} {
    scheme_str [evaluate [parse "(deg->rad 90)"]]
} "1.5707963267948966"

::tcltest::test standard_env-16.1 {math: degrees and radians} {
    scheme_str [evaluate [parse "(rad->deg (/ pi 2))"]]
} "90.0"

::tcltest::cleanupTests
